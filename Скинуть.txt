## Как сдавать

1. Создать на Github/Gitlab/Gitflic новый репозиторий с однозначным именем (например, `Labs_PSTU_2023`). 
2. В README.md к репозиторию укажите ваше имя и группу для точной идентификации.
3. В репозитории создать единственную директорию `Sem_1`.
4. В директории `Sem_1` для каждой задачи создать субдиректорию с ее номером (например, `1_1`, `2_13` и т.п.)
5. В директории задачи должны лежать 2 файла: `.cpp` и блок-схема в PNG или JPG
6. Именовать файлы каждой задачи по ее номеру (`1_1.cpp`, `1_1.png`)
7. Никаких других файлов не загружать, только исходный код и блок-схемы.

```
PSTU_Labs_2023/
└── Sem_1/
    ├── 1_1
    ├── 1_2
    ├── 2_13/
    │   ├── 2_13.cpp
    │   └── 2_13.png
    └── 2_22
```

## 1. Операторы базовых конструкций структурного программирования

### Задача 1.1

**Условие**: создать программу для поиска максимального целого числа из трех. Числа последовательно вводит пользователь.

```c++
int a, b, c, max;

cin >> a >> b >> c;

if (a >= b)
{
    max = a;
}
else
{
    max = b;
}

if (c > max)
{
    max = c;
}

cout << max << endl;
```

### Задача 1.2

**Условие**: создать программу для деления двух чисел (одно на другое). Предусмотреть, что они могут быть равными 0 (и на ноль делить нельзя).

```c++
float a, b;

cin >> a >> b;

if (b == 0)
{
    cout << "На ноль делить нельзя!" << endl; 
}
else
{
    cout << a / b << endl;  //"\n"
}

```

### Задача 1.3

**Условие**: создать программу анализа полученного числа. Если оно меньше 5, то умножить его на 3. Если оно от 5 до 7, то поделить на 10. Если больше 7, то прибавить 3.

```c++
float a;

cin >> a;

if (a < 5)
{
    cout << a * 3 << endl;
}
else if (a > 7)
{
    cout << a + 3 << endl;
}
else
{
    cout << a / 10 << endl;
}
```

## 2. Циклические алгоритмы

### Задача 2.1

**Условие**: посчитать сумму N первых натуральных чисел.

```c++
int n;
int sum = 0;

cin >> n;

if (n <= 0)
{
    cout << "Невозможно посчитать сумму натуральных чисел при n <= 0" << endl;
}
else
{
    for (int i = 1; i <= n; i++)
    {
        sum += i;
    }
    cout << sum << endl;
}
```

### Задача 2.2

**Условие**: посчитать произведение N первых натуральных чисел.

```c++
int n; int product = 1;

cin >> n;

if (n <= 0)
{
    cout << "Невозможно посчитать произведение натуральных чисел при n <= 0" << endl;
}
else
{
    for (int i = 1; i <= n; i++)
    {
        product *= i;
    }
    cout << product << endl;
}
```

### Задача 2.3

**Условие**: посчитать сумму `S = 1*2 + 2*3*4 + 3*4*5*6 + 4*5*6*7*8 + ....` до N (натурального числа) по порядку.

```c++
int n;
int tmp, sum = 0;

cin >> n;

for (int i = 1; i <= n; i++)
{
    tmp = 1;
    for (int j = i; j <= 2*i; j++)
    {
        tmp *= j;
    }
    sum += tmp;
}
cout << sum << endl;
```

### Задача 2.4

**Условие**: напечатать в консоли равнобедренный треугольник из звездочек (`*`) с вершиной, направленной вверх, и основанием N, где N — натуральное нечетное число больше 3.

```c++
int n;

cin >> n;

int spaces = n/2;
int stars = 1;

for (int i = 0; i < (n+1)/2; i++)
{
    for (int j = 0; j < spaces; j++)
    {
        cout << " ";
    }
    spaces--;
    for (int j = 0; j < stars; j++)
    {
        cout << "*";
    }
    stars += 2;
    cout << endl;
}
```

### Задача 2.5

**Условие**: напечатать заполненный прямоугольный равнобедренный треугольник из `*` со сторонами катетов, равными N, и прямым углом справа снизу. где N — натуральное число больше 2.

### Задача 2.6

**Условие**: напечатать заполненный прямоугольный равнобедренный треугольник из `*` со сторонами катетов, равными N, и прямым углом справа сверху. где N — натуральное число больше 2.

### Задача 2.7

**Условие**: Напечатать квадрат из N звездочек. Реализовать все три варианта. 

* А) В котором ВСЕГО N звездочек.
* Б) Заполненный квадрат со стороной N.
* В) Пустой квадрат со стороной N. В каждом из вариантов задать требования к минимальному N.

### Задача 2.8 

**Условие**: Напечатать прямоугольный равнобедренный треугольник со сторонами катетов, равными N, и прямым углом слева снизу, где N — натуральное число больше 2.

```c++
int n;

cin >> n;

for (int i = 0; i < n; i++)
{
    for (int j = 0; j <= i; j++)
    {
        cout << "*";
    }
    cout << endl;
}
```

### Задача 2.9

**Условие**: Построить пустой куб из звездочек.

### Задача 2.10

**Условие**: Последовательность целых чисел вводится с клавиатуры. Первое введенное число не является элементом последовательности, а задает количество элементов последовательности. Найти первый max элемент в последовательности.

### Задача 2.11

**Условие**: Последовательность целых чисел вводится с клавиатуры. Первое введенное число не является элементом последовательности, а задает количество элементов последовательности. Определить, что вводится раньше в последовательности: положительные или отрицательные числа (все введенные элементы могут быть нулевыми). Сделать это нужно после того, как введены все задуманные элементы последовательности.

### Задача 2.12

**Условие**: Последовательность из N положительных чисел вводится с клавиатуры. Найти сумму максимального и минимального элементов последовательности.

### Задача 2.13

**Условие**: Решите квадратное уравнение вида a*x<sup>2</sup> + b*x + c = 0. Коэффициенты уравнения вводятся с клавиатуры.

### Задача 2.14

**Условие**: дано натуральное число N, найти сумму цифр этого числа.

### Задача 2.15

**Условие**: дано натуральное число N, проверить, входить ли цифра S в запись этого числа.

### Задача 2.16

**Условие**: Вычислить сумму S = -1 + 2 - 3 + 4 - 5 + 6 - ... до N слагаемых.

### Задача 2.17
**Условие**: Вычислить значение многочлена: <img src=https://latex.codecogs.com/svg.latex?y%20%3D%20%5Csum_%7Bi%3D0%7D%5E%7Bn%7D%20%5Cfrac%7Bx%5E%7Bi%7D%7D%7Bi%21%7D%20%3D%201+%20x%20+%20%5Cfrac%7Bx%5E2%7D%7B1%5Ctimes2%7D%20+%20%5Ccdots>

```c++
#include <cmath>

int n;
float x, fact, sum;

cin >> n >> x;

sum = 1 + x;
fact = 1;

for (int i = 2; i <= n; i++)
{
    fact *= i;
    sum += (pow(x, i) / fact);
}
cout << sum << endl;
```

### Задача 2.18
**Условие**: Дано натуральное число N. Поменять порядок цифр числа N на обратный.

```c++
int n;
int r = 0; // reversed

cin >> n;

while (n > 0)
{
    r = r*10 + n % 10;
    n /= 10;
}
cout << r << endl;
```

### Задача 2.19
**Условие**: Вычислить сумму S = 1 + 2 - 3 + 4 + 5 - 6 + 7 + 8 - 9 ... до N слагаемых.

```c++
int n;
int sum = 0;

cin >> n;

for (int i = 1; i <= n; i++)
{
    if (i % 3 == 0)
    {
        sum -= i;
    }
    else
    {
        sum += i;
    }
}
cout << sum << endl;
```

### Задача 2.20
**Условие**:  Последовательность элементов задана формулой общего члена <img src="https://latex.codecogs.com/svg.latex?%5Cinline%20a_%7Bi%7D%20%3D%20sin%28n%20&plus;%20%5Cfrac%7Bi%7D%7Bn%7D%29">. Проверить, если ли среди этих элементов элемент, равный S.

```c++
#include <cmath>

float n, s, a;
int i = 1;
bool flag = false;

cin >> n >> s;

while (i <= n && !flag)
{
    a = sin(n + i / n);
    // для удобства проверки, не часть алгоритма
    a = round(a*10)/10;
    cout << n + i/n << "|" << a << endl;
    //конец удобства...
    if (a == s)
    {
        flag = true;
    }
    else
    {
        i++;
    }
}

if (flag)
{
    cout << "Элемент найден!" << endl;
    // Если нужен номер элемента в последовательности, просто выводим i
    // cout << ""Элемент найден! Его номер: " << i << endl;
}
else
{
    cout << "Элемент не найден!" << endl;
}
```

### Задача 2.21
**Условие**: Числа вводятся с клавиатуры до тех пор, пока не встретится число 0 (0 — признак окончания ввода). Проверить, упорядочены ли числа по возрастанию.

### Задача 2.22
**Условие**: Найти максимальный элемент в последовательности (его значение и номер). Последовательность элементов задана формулой общего члена <img src="https://latex.codecogs.com/svg.latex?%5Cinline%20a_%7Bi%7D%20%3D%20sin%28n%20&plus;%20%5Cfrac%7Bi%7D%7Bn%7D%29">.

### Задача 2.23
**Условие**: Посчитать количество элементов, совпадающих с максимальным. Последовательность элементов задана формулой общего члена <img src="https://latex.codecogs.com/svg.latex?%5Cinline%20a_%7Bi%7D%20%3D%20sin%28n%20&plus;%20%5Cfrac%7Bi%7D%7Bn%7D%29">


Задачки на указатели:
1. Обменять значения двух переменных через указатели.
2. Сложение двух целых чисел через указатели
3. Сложение двух чисел с плавающей запяток через указатели
4. Найти минимальное и максимальное число в последовательности через указатели
5. Вычислить факториал числа N через указатели
6. Подсчитать количество гласных и согласных в строке через указатели (в строке только буквы русского алфавита)
7. Изменение значение переменной через указатель
8. Написать программу, которая принимает некоторую строку и 2 символа (большую букву и строчную), после чего подсчитывает число заданных символов в строке и всех остальных, а также общее число символов в строке.

# Методы решения нелинейных уравнений

## Метод половинного деления

```c++
// f(x) = x^3 - x - 1
// [1; 2]

#include <iostream>
#include <cmath>

using namespace std;

int main()
{
    float a, b, c;
    float fA, fB, fC;
    double eps = 0.000001;

    a = 1;
    b = 2;

    while (b-a > eps)
    {
        c = (a + b) / 2;
        fA = (pow(a, 3) - a - 1);
        fB = (pow(b, 3) - b - 1);
        fC = (pow(c, 3) - c - 1);
        if (fA * fC < 0) { b = c; }
        else if (fC * fB < 0) { a = c; }
        else { cout << "Что-то не то!" << endl; }       
    }
    cout << "Корни: " << a << "; " << b << endl;
    return 0;
}
```
## Метод Ньютона (метод касательных)

```c++
// f(x) = x^3 - x - 1;
// f'(x) = 3x^2 - 1;
// f''(x) = 6x;
// [1, 2]

#include <iostream>
#include <cmath>

using namespace std;
int main()
{
    float x, xPrev;
    // проверяем, берем ли мы сначала a или b за начальное значение x
    // f(b) * f''(b) > 0
    // (8 - 2 - 1) * (6*2) > 0 => x0 = b;
    // если бы условие не выполнилось, нужно проверить это с a
    x = 2;  // x0 = b;
    xPrev = 0;  // инициализируем переменную x(n-1)
    double eps = 0.000001;

    while(abs(x - xPrev) > eps)
    {
        xPrev = x;
        // сюда мы пишем формулу, где x(i-1) - f(x(i-1)) / f'(x(i-1))
        x = xPrev - ( (pow(xPrev, 3) - xPrev - 1) / (3*pow(xPrev, 2) - 1) )
    }
    cout << "Корень: " << x << endl;
    return 0;
}
```

## Метод итераций

```c++
// f(x) = x^3 - x - 1
// f'(x) = 3x^2 - 1;
// f''(x) = 6x;
// [1, 2]
// ф(x) = x + λ(x^3 - x - 1)
// -1/r < λ < 0, если f'(x) > 0
// 0 < λ < 1/r, если f'(x) < 0
// r = max(|f'(a)|, |f'(b)|)
// r = max(|3*1^2 - 1|, |3*2^2 - 1|) = max(2, 11) = 11
// f'(x) > 0 => -1/r < λ < 0
// берем любое удобное число в диапазоне
// λ = -1/20 = -0.05

#include <iostream>
#include <cmath>

using namespace std;
int main()
{
    float x, xPrev;
    double lambda = -0.05; // -1/20
    x = 2; // можно выбрать любое x0 из [1, 2] — выбранного заранее промежутка — a или b по желанию
    xPrev = 0;  // делаем заведомо меньше x
    double eps = 0.000001;

    while (abs(x - xPrev) > eps)
    {
        xPrev = x;
        x = lambda * (pow(xPrev, 3) - xPrev - 1) + xPrev;
    }
    cout << "Корень по методу итераций: " << x << endl;
    return 0;
}
```
